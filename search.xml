<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python循环优化</title>
    <url>/2024/05/28/python/python_loop-optimization/Python_loop-optimization/</url>
    <content><![CDATA[<h1 id="python循环优化"><a href="#python循环优化" class="headerlink" title="python循环优化"></a>python循环优化</h1><p>python中经常使用到for循环，需要消耗大量时间，本文将介绍一些简单的方法进行提速。</p>
<span id="more"></span>

<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>使用列表推导式，加快运行速度</p>
<ul>
<li>原始代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_raw</span>(<span class="params">list_numbers</span>):</span><br><span class="line">    list_results = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> list_numbers:</span><br><span class="line">        list_results.append(n**<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> list_results</span><br></pre></td></tr></table></figure>

<ul>
<li>优化代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_optimization</span>(<span class="params">list_numbers</span>):</span><br><span class="line">    list_results = [n**<span class="number">3</span> <span class="keyword">for</span> n <span class="keyword">in</span> list_numbers]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="减少内部计算"><a href="#减少内部计算" class="headerlink" title="减少内部计算"></a>减少内部计算</h2><p>在循环之外计算好列表的长度</p>
<ul>
<li>原始代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_raw</span>(<span class="params">list_number</span>):</span><br><span class="line">    list_results = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_number)):</span><br><span class="line">        list_results.append(n ** <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> list_results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优化代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_optimization</span>(<span class="params">list_number</span>):</span><br><span class="line">    list_results = []</span><br><span class="line">    len_number = <span class="built_in">len</span>(list_number)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(len_number):</span><br><span class="line">        list_results.append(n ** <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> list_results</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h2><p>map函数是用C语言编写，并且经过了优化</p>
<ul>
<li>原始代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_raw</span>(<span class="params">list_number</span>):</span><br><span class="line">    list_results = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_number)):</span><br><span class="line">        list_results.append(Func(n))</span><br><span class="line">    <span class="keyword">return</span> list_results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优化代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Func</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_optimization</span>(<span class="params">list_number</span>):</span><br><span class="line">    list_results = <span class="built_in">map</span>(Func, list_number)</span><br><span class="line">    <span class="keyword">return</span> list_results</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>将数据向量化</p>
<ul>
<li>原始代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_raw</span>(<span class="params">n</span>):</span><br><span class="line">    results = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        results = results + i</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优化代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_optimization</span>(<span class="params">n</span>):</span><br><span class="line">    results = np.<span class="built_in">sum</span>(np.arange(n))</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>数据测试</li>
</ul>
<h2 id="join连接字符串"><a href="#join连接字符串" class="headerlink" title="join连接字符串"></a>join连接字符串</h2><p>join连接字符串快于使用<code>+</code>号</p>
<ul>
<li>原始代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_raw</span>(<span class="params">list_strs</span>):</span><br><span class="line">    results = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i_str <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        results = results + i_str</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优化代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Calculate_optimization</span>(<span class="params">list_strs</span>):</span><br><span class="line">    results = <span class="string">&quot;&quot;</span>.join(list_strs)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>underlying</tag>
      </tags>
  </entry>
  <entry>
    <title>python并行</title>
    <url>/2024/05/28/python/python_Parallel/Python_Parallel/</url>
    <content><![CDATA[<h1 id="Pparallelism"><a href="#Pparallelism" class="headerlink" title="Pparallelism"></a>Pparallelism</h1><p>python并行执行任务</p>
<span id="more"></span>

<h2 id="python-执行shell"><a href="#python-执行shell" class="headerlink" title="python 执行shell"></a>python 执行shell</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> subp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Subp_call</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="built_in">print</span>(cmd)</span><br><span class="line">    subp.check_call(cmd, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="python-异步进程池"><a href="#python-异步进程池" class="headerlink" title="python 异步进程池"></a>python 异步进程池</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n_threads = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">params_list = [[], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Work</span>(<span class="params">i</span>):</span><br><span class="line">    time.spleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Multi_process</span>(<span class="params">function, params_list, n_threads</span>):</span><br><span class="line"></span><br><span class="line">    pool = Pool(n_threads)</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params_list:</span><br><span class="line">        pool.apply_async(func=function, args=param)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="python-异步进程池，并获取返回结果"><a href="#python-异步进程池，并获取返回结果" class="headerlink" title="python 异步进程池，并获取返回结果"></a>python 异步进程池，并获取返回结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">n_threads = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">params_list = [[], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Work</span>(<span class="params">i</span>):</span><br><span class="line">    time.spleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Multi_process_get</span>(<span class="params">function, params_list, n_threads</span>):</span><br><span class="line"></span><br><span class="line">    res_list = []</span><br><span class="line">    pool = Pool(n_threads)</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params_list:</span><br><span class="line">        res = pool.apply_async(func=function, args=param)</span><br><span class="line">        res_list.append(res)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    out_list = []</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_list:</span><br><span class="line">        out_list.append(res.get())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> out_list</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="python-异步进程池，并同时打印进程进度"><a href="#python-异步进程池，并同时打印进程进度" class="headerlink" title="python 异步进程池，并同时打印进程进度"></a>python 异步进程池，并同时打印进程进度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">n_threads = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">params_list = [[], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Work</span>(<span class="params">i</span>):</span><br><span class="line">    time.spleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Multi_process</span>(<span class="params">function, params_list, n_threads, description=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    </span><br><span class="line">    pbar = tqdm(total=<span class="built_in">len</span>(params_list))</span><br><span class="line">    pbar.set_description(description)</span><br><span class="line">    update = <span class="keyword">lambda</span> *args: pbar.update()</span><br><span class="line"></span><br><span class="line">    pool = Pool(n_threads)</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params_list:</span><br><span class="line">        pool.apply_async(function, param, callback=update)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="python-异步进程池，获取返回结果-并同时打印进程进度"><a href="#python-异步进程池，获取返回结果-并同时打印进程进度" class="headerlink" title="python 异步进程池，获取返回结果, 并同时打印进程进度"></a>python 异步进程池，获取返回结果, 并同时打印进程进度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">n_threads = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">params_list = [[], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Work</span>(<span class="params">i</span>):</span><br><span class="line">    time.spleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Multi_process</span>(<span class="params">function, params_list, n_threads, description=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    </span><br><span class="line">    pbar = tqdm(total=<span class="built_in">len</span>(params_list))</span><br><span class="line">    pbar.set_description(description)</span><br><span class="line">    update = <span class="keyword">lambda</span> *args: pbar.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    res_list = []</span><br><span class="line">    pool = Pool(n_threads)</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params_list:</span><br><span class="line">        res = pool.apply_async(func=function, args=param, callback=update)</span><br><span class="line">        res_list.append(res)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line">    out_list = []</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_list:</span><br><span class="line">        out_list.append(res.get())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_list</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>underlying</tag>
      </tags>
  </entry>
  <entry>
    <title>回归模型评价</title>
    <url>/2024/05/30/model/Model_Regression-model-evaluation/Model_Regression-model-evaluation/</url>
    <content><![CDATA[<h1 id="回归模型评价"><a href="#回归模型评价" class="headerlink" title="回归模型评价"></a>回归模型评价</h1><p>回归模型的评价指标：MSE、RMSE、RMSLE、R<sup>2</sup>。</p>
<span id="more"></span>


<h2 id="MSE-（Mean-Square-Error）均方误差"><a href="#MSE-（Mean-Square-Error）均方误差" class="headerlink" title="MSE （Mean Square Error）均方误差"></a>MSE （Mean Square Error）均方误差</h2><p>MSE是真实值和预测值的差值平方后求平均值，常被用作线性回归的损失函数。</p>
<p>$$<br>MSE &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} (y_i - \hat{y}_i)^2<br>$$</p>
<h2 id="RMSE-Root-Mean-Square-Error-均方根误差"><a href="#RMSE-Root-Mean-Square-Error-均方根误差" class="headerlink" title="RMSE (Root Mean Square Error) 均方根误差"></a>RMSE (Root Mean Square Error) 均方根误差</h2><p>RMSE是MSE值的开方，衡量观察值和真实值之间的偏差，常用作机器学习模型预测结果的衡量标准。</p>
<p>$$<br>RMSE &#x3D; \sqrt{\frac{1}{n} \sum_{i&#x3D;1}^{n} (y_i - \hat{y}_i)^2}<br>$$</p>
<p>RMSE值的阈值：</p>
<pre><code>- RMSE值越小，预测模型准确度越高
- RMSE值低于数据标准差10%，则可被认为是一种较好的预测模型
- RMSE在数据集是正态分布的情况下，则是一个合适的评价标准；RMSE在数据集中离群点较多或者存在其他异常情况下，则不太合适
</code></pre>
<h2 id="MAE-Mean-Absolute-Error-平均绝对误差"><a href="#MAE-Mean-Absolute-Error-平均绝对误差" class="headerlink" title="MAE (Mean Absolute Error) 平均绝对误差"></a>MAE (Mean Absolute Error) 平均绝对误差</h2><p>MAE是绝对误差的平均值，反映预测值误差的实际情况。</p>
<p>$$<br>MAE &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} |y_i - \hat{y}_i|<br>$$</p>
<h2 id="RMSLE-Root-Mean-Squared-Logarithmic-Error-均方根对数误差"><a href="#RMSLE-Root-Mean-Squared-Logarithmic-Error-均方根对数误差" class="headerlink" title="RMSLE (Root Mean Squared Logarithmic Error) 均方根对数误差"></a>RMSLE (Root Mean Squared Logarithmic Error) 均方根对数误差</h2><p>RMSLE关注相对误差：</p>
<pre><code>- 对数误差能降低数值较大的目标变量的影响，使得评估过程更关注相对误差
- 平方根误差可以放大小误差，更有助于模型拟合数据
- 对数均方根误差不适用于目标变量存在负值的情况
</code></pre>
<p>$$<br>RMSLE &#x3D; \sqrt{\frac{1}{n} \sum_{i&#x3D;1}^{n} \left( \log(\hat{y}_i + 1) - \log(y_i + 1) \right)^2}<br>$$</p>
<h2 id="R2-可决系数"><a href="#R2-可决系数" class="headerlink" title="R2 可决系数"></a>R<sup>2</sup> 可决系数</h2><p>R<sup>2</sup>是拟合优度，反映的是自变量X对因变量y的变动的解释程度，越接近于1，说明模型拟合越好。</p>
<p>$$<br>R^2 &#x3D; 1 - \frac{SS_{res}}{SS_{tot}}<br>$$</p>
<p>SS<sub>res</sub>是残差平方和，衡量了观测值与模型预测值之间的偏差</p>
<p>$$<br>SS_{res} &#x3D; \sum_{i&#x3D;1}^{n} (y_i - \hat{y}_i)^2<br>$$</p>
<p>SS<sub>tot</sub>是总平方和，衡量了因变量的总方差。</p>
<p>$$<br>SS_{tot} &#x3D; \sum_{i&#x3D;1}^{n} (y_i - \bar{y})^2<br>$$</p>
]]></content>
      <categories>
        <category>Model</category>
      </categories>
      <tags>
        <tag>Model_train</tag>
        <tag>Regression</tag>
      </tags>
  </entry>
  <entry>
    <title>pyCirclize</title>
    <url>/2024/06/02/packages/pyCirclize/pycirclize/</url>
    <content><![CDATA[<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><p><a href="https://github.com/moshi4/pycirclize">github</a>: <a href="https://github.com/moshi4/pycirclize">https://github.com/moshi4/pycirclize</a></p>
</li>
<li><p><a href="https://moshi4.github.io/pyCirclize/">documentation</a>: <a href="https://moshi4.github.io/pyCirclize/">https://moshi4.github.io/pyCirclize/</a></p>
</li>
</ul>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pip install pycirclize</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>packages</category>
      </categories>
      <tags>
        <tag>plot</tag>
      </tags>
  </entry>
</search>
